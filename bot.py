import asyncio
import logging
import os
import sys
import json
from datetime import timedelta
from neonize.aioze.client import NewAClient
from neonize.events import (
    ConnectedEv,
    MessageEv,
    PairStatusEv,
    event,
)
from neonize.utils import log

sys.path.insert(0, os.getcwd())

# Konfigurasi logging yang lebih baik
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log.setLevel(logging.DEBUG)

# Inisialisasi client
client = NewAClient("db.sqlite3")

# Variable global untuk tracking status
is_connected = False

@client.event(ConnectedEv)
async def on_connected(_: NewAClient, __: ConnectedEv):
    global is_connected
    is_connected = True
    log.info("‚ö° Connected to WhatsApp")
    print("‚úÖ Bot berhasil terhubung ke WhatsApp!")
    print("ü§ñ Bot siap menerima perintah!")
    print("üí° Kirim 'help' untuk melihat daftar perintah")
    
    # Jangan auto-download kontak karena menyebabkan crash
    # Biarkan user yang meminta manual dengan perintah
    print("‚ö†Ô∏è Auto-download kontak dinonaktifkan untuk stabilitas")

@client.event(MessageEv)
async def on_message(client: NewAClient, message: MessageEv):
    await handler(client, message)

@client.event(PairStatusEv)
async def PairStatusMessage(_: NewAClient, message: PairStatusEv):
    log.info(f"üì± Logged as {message.ID.User}")
    print(f"üì± Login sebagai: {message.ID.User}")

async def handler(client: NewAClient, message: MessageEv):
    try:
        # Cek apakah pesan dari diri sendiri
        if message.Info.MessageSource.IsFromMe:
            return
            
        # Ekstrak teks dari pesan dengan handling yang lebih baik
        text = ""
        if hasattr(message.Message, 'conversation') and message.Message.conversation:
            text = message.Message.conversation
        elif hasattr(message.Message, 'extendedTextMessage') and message.Message.extendedTextMessage:
            if hasattr(message.Message.extendedTextMessage, 'text'):
                text = message.Message.extendedTextMessage.text
        
        # Skip jika tidak ada teks
        if not text:
            return
            
        text = text.strip().lower()
        chat = message.Info.MessageSource.Chat
        
        print(f"üì® Pesan diterima dari {chat}: {text}")
        
        # Respon untuk berbagai perintah
        if text == "ping":
            await client.reply_message("üèì pong - Bot aktif!", message)
        elif text == "download_contacts":
            await download_contacts_command(client, message)
        elif text == "profile_pict":
            await get_profile_picture(client, message, chat)
        elif text == "status_privacy":
            await get_status_privacy(client, message)
        elif text == "get_chat_settings":
            await get_chat_settings(client, message, chat)
        elif text == "help":
            await show_help(client, message)
        elif text == "status":
            await client.reply_message("ü§ñ Bot aktif dan berjalan dengan baik!", message)
        elif text == "info":
            await get_bot_info(client, message)
        elif text.startswith("echo "):
            # Echo command untuk testing
            echo_text = text[5:]  # Remove "echo "
            await client.reply_message(f"üîä Echo: {echo_text}", message)
            
    except Exception as e:
        print(f"‚ùå Error saat memproses pesan: {e}")
        try:
            await client.reply_message(f"‚ùå Terjadi error: {str(e)}", message)
        except:
            pass

# Fungsi untuk mengunduh kontak dengan error handling yang lebih baik
async def download_contacts():
    try:
        print("üì• Mengunduh daftar kontak...")
        
        # Tambahkan delay untuk memastikan koneksi stabil
        await asyncio.sleep(2)
        
        # Coba beberapa kali jika gagal
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"üîÑ Percobaan {attempt + 1}/{max_retries}")
                
                # Coba dengan timeout
                contacts = await asyncio.wait_for(
                    client.contact.get_all_contacts(),
                    timeout=30.0  # 30 detik timeout
                )
                
                if contacts and len(contacts) > 0:
                    # Konversi ke format yang bisa di-serialize dengan validasi
                    contacts_data = []
                    for i, contact in enumerate(contacts):
                        try:
                            contact_dict = {
                                'index': i,
                                'jid': str(contact.JID) if hasattr(contact, 'JID') and contact.JID else f'unknown_{i}',
                                'name': str(contact.Name) if hasattr(contact, 'Name') and contact.Name else 'No Name',
                                'notify': str(contact.Notify) if hasattr(contact, 'Notify') and contact.Notify else '',
                                'business': str(contact.BusinessName) if hasattr(contact, 'BusinessName') and contact.BusinessName else ''
                            }
                            contacts_data.append(contact_dict)
                        except Exception as e:
                            print(f"‚ö†Ô∏è Error processing contact {i}: {e}")
                            # Tetap lanjutkan dengan contact lainnya
                            continue
                    
                    # Simpan kontak ke file jika ada data
                    if contacts_data:
                        with open("contacts.json", "w", encoding='utf-8') as f:
                            json.dump(contacts_data, f, indent=4, ensure_ascii=False)
                        
                        print(f"‚úÖ Berhasil mengunduh {len(contacts_data)} kontak")
                        print("üìÅ Kontak disimpan di contacts.json")
                        return contacts_data
                    else:
                        print("‚ö†Ô∏è Tidak ada kontak valid yang bisa diproses")
                        return []
                        
                else:
                    print("‚ö†Ô∏è Tidak ada kontak yang ditemukan atau kontak kosong")
                    return []
                    
            except asyncio.TimeoutError:
                print(f"‚è∞ Timeout pada percobaan {attempt + 1}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                    continue
                else:
                    raise Exception("Timeout saat mengambil kontak setelah beberapa percobaan")
                    
            except Exception as e:
                print(f"‚ùå Error pada percobaan {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                    continue
                else:
                    raise e
        
        return []
            
    except Exception as e:
        print(f"‚ùå Error saat mengunduh kontak: {e}")
        return None

# Fungsi untuk perintah download kontak dengan safety check
async def download_contacts_command(client, message):
    try:
        await client.reply_message("‚ö†Ô∏è PERINGATAN: Download kontak dapat menyebabkan crash jika tidak ada kontak. Lanjutkan? (Kirim 'yes' untuk konfirmasi)", message)
        
        # Untuk sementara, beri pesan bahwa fitur ini bermasalah
        await asyncio.sleep(1)
        await client.reply_message("""
‚ùå **Fitur Download Kontak Sementara Dinonaktifkan**

Alasan: Library neonize mengalami bug saat mengakses kontak kosong yang menyebabkan aplikasi crash.

üîß **Alternatif:**
‚Ä¢ Pastikan WhatsApp Anda memiliki kontak
‚Ä¢ Coba restart bot setelah menambah kontak
‚Ä¢ Gunakan fitur lain yang tersedia

Ketik 'help' untuk melihat fitur lain yang bisa digunakan.
        """, message)
        
    except Exception as e:
        await client.reply_message(f"‚ùå Error: {str(e)}", message)

# Fungsi untuk mendapatkan foto profil dengan better handling
async def get_profile_picture(client, message, chat):
    try:
        await client.reply_message("üì∏ Mengambil foto profil...", message)
        
        # Tambahkan timeout
        profile_picture = await asyncio.wait_for(
            client.get_profile_picture(chat),
            timeout=15.0
        )
        
        if profile_picture:
            await client.reply_message(f"üì∏ Foto profil ditemukan: {profile_picture}", message)
        else:
            await client.reply_message("‚ùå Tidak dapat mengambil foto profil atau foto profil tidak tersedia", message)
            
    except asyncio.TimeoutError:
        await client.reply_message("‚è∞ Timeout saat mengambil foto profil", message)
    except Exception as e:
        await client.reply_message(f"‚ùå Error saat mengambil foto profil: {str(e)}", message)

# Fungsi untuk mendapatkan status privasi
async def get_status_privacy(client, message):
    try:
        await client.reply_message("üîí Mengambil status privasi...", message)
        
        status_privacy = await asyncio.wait_for(
            client.get_status_privacy(),
            timeout=15.0
        )
        
        await client.reply_message(f"üîí Status privasi: {status_privacy}", message)
        
    except asyncio.TimeoutError:
        await client.reply_message("‚è∞ Timeout saat mengambil status privasi", message)
    except Exception as e:
        await client.reply_message(f"‚ùå Error saat mengambil status privasi: {str(e)}", message)

# Fungsi untuk mendapatkan pengaturan chat
async def get_chat_settings(client, message, chat):
    try:
        await client.reply_message("‚öôÔ∏è Mengambil pengaturan chat...", message)
        
        chat_settings = await asyncio.wait_for(
            client.chat_settings.get_chat_settings(chat),
            timeout=15.0
        )
        
        await client.reply_message(f"‚öôÔ∏è Pengaturan chat: {chat_settings}", message)
        
    except asyncio.TimeoutError:
        await client.reply_message("‚è∞ Timeout saat mengambil pengaturan chat", message)
    except Exception as e:
        await client.reply_message(f"‚ùå Error saat mengambil pengaturan chat: {str(e)}", message)

# Fungsi untuk info bot
async def get_bot_info(client, message):
    info_text = f"""
ü§ñ **WhatsApp Bot Info:**

üìä **Status:** ‚úÖ Aktif dan Berjalan
üîó **Koneksi:** ‚úÖ Terhubung ke WhatsApp  
üíæ **Database:** db.sqlite3
üì± **Platform:** Neonize Python Client
‚ö° **Uptime:** Sejak terakhir restart

üîß **Fitur yang Stabil:**
‚Ä¢ Ping/Pong ‚úÖ
‚Ä¢ Echo command ‚úÖ
‚Ä¢ Help & Info ‚úÖ  
‚Ä¢ Status check ‚úÖ

‚ö†Ô∏è **Fitur dalam Perbaikan:**
‚Ä¢ Download contacts (bug library)
‚Ä¢ Profile picture (tergantung privacy)

üí° **Tips:** Gunakan 'help' untuk daftar lengkap perintah
    """
    await client.reply_message(info_text, message)

# Fungsi untuk menampilkan bantuan
async def show_help(client, message):
    help_text = """ü§ñ **WhatsApp Bot - Daftar Perintah:**

üîß **Perintah Dasar:**
‚Ä¢ `ping` - Tes koneksi bot
‚Ä¢ `status` - Cek status bot  
‚Ä¢ `info` - Informasi detail bot
‚Ä¢ `help` - Tampilkan bantuan ini
‚Ä¢ `echo [text]` - Echo pesan (contoh: echo hello)

üìã **Fitur Kontak:**
‚Ä¢ `download_contacts` - ‚ö†Ô∏è Sementara dinonaktifkan (bug library)

üì∏ **Fitur Profile:**
‚Ä¢ `profile_pict` - Ambil foto profil (mungkin dibatasi privacy)

üîí **Fitur Privasi:**
‚Ä¢ `status_privacy` - Dapatkan status privasi

‚öôÔ∏è **Pengaturan:**
‚Ä¢ `get_chat_settings` - Dapatkan pengaturan chat

---
üöÄ **Bot berjalan 24/7 dan siap melayani!**
üí° **Ketik perintah tanpa tanda kutip**
‚ö†Ô∏è **Beberapa fitur tergantung pengaturan privacy WhatsApp Anda**
"""
    
    await client.reply_message(help_text, message)

# Fungsi untuk keep alive yang lebih robust
async def keep_alive():
    """Keep the bot running and handle reconnection"""
    heartbeat_count = 0
    
    while True:
        try:
            if not is_connected:
                print("üîÑ Menunggu koneksi...")
                await asyncio.sleep(5)
                continue
            
            # Heartbeat setiap 60 detik dengan counter
            heartbeat_count += 1
            print(f"üíì Bot aktif - Heartbeat #{heartbeat_count}")
            
            # Setiap 10 heartbeat (10 menit), tampilkan info lebih detail
            if heartbeat_count % 10 == 0:
                print(f"üìä Bot telah berjalan selama {heartbeat_count} menit")
                print("‚úÖ Semua sistem normal")
            
            await asyncio.sleep(60)  # 60 detik
            
        except Exception as e:
            print(f"‚ùå Error dalam keep_alive: {e}")
            await asyncio.sleep(30)

# Fungsi utama yang lebih robust dengan error recovery
async def main():
    global is_connected
    
    print("=" * 50)
    print("ü§ñ WHATSAPP BOT STARTING")
    print("=" * 50)
    print("üì± Menghubungkan dengan QR Code...")
    print("‚è≥ Scan QR Code yang muncul dengan WhatsApp Anda")
    print("‚ö†Ô∏è Fitur download kontak dinonaktifkan karena bug library")
    print("=" * 50)
    
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        try:
            # Jalankan connect dan keep_alive secara bersamaan
            print(f"üîÑ Percobaan koneksi {retry_count + 1}/{max_retries}")
            
            connect_task = asyncio.create_task(client.connect())
            keep_alive_task = asyncio.create_task(keep_alive())
            
            # Tunggu hingga salah satu task selesai atau error
            done, pending = await asyncio.wait(
                [connect_task, keep_alive_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # Jika sampai sini tanpa exception, berarti berhasil
            print("‚úÖ Koneksi berhasil dan stabil")
            
            # Tunggu hingga user menghentikan dengan Ctrl+C
            try:
                while is_connected:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                print("\nüõë Bot dihentikan oleh user")
                break
                
        except KeyboardInterrupt:
            print("\nüõë Bot dihentikan oleh user")
            break
            
        except Exception as e:
            print(f"‚ùå Error koneksi (percobaan {retry_count + 1}): {e}")
            retry_count += 1
            
            if retry_count < max_retries:
                print(f"‚è≥ Menunggu 10 detik sebelum retry...")
                await asyncio.sleep(10)
            else:
                print("‚ùå Maksimal percobaan tercapai")
                break
        
        finally:
            # Cleanup tasks
            for task in [connect_task, keep_alive_task]:
                if not task.done():
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
    
    is_connected = False
    print("üëã Bot telah berhenti sepenuhnya")

if __name__ == "__main__":
    # Jalankan dengan event loop yang proper
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Program dihentikan oleh user")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        print("üí° Coba restart bot atau periksa koneksi internet")
